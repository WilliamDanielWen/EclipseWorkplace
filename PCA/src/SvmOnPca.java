import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Random;

import weka.classifiers.functions.LibSVM;
import weka.core.Instances;
import weka.core.SelectedTag;

public class SvmOnPca {
	public static void main(String[] args) throws Exception{
		FileWriter fStream = new FileWriter("datasets//digits//SvmOnPcaResult.csv");
		BufferedWriter out = new BufferedWriter(fStream);
		// write the header
		out.write("Dimension,Accuracy");
		out.newLine();
		
		double accuracy;
		// train svm on each dimension. each training takes at most 2 minutes
		accuracy=trainSVM(2);
		out.write("2,"+accuracy);
		out.newLine();
		
		accuracy=trainSVM(5);
		out.write("5,"+accuracy);
		out.newLine();
		
		accuracy=trainSVM(10);
		out.write("10,"+accuracy);
		out.newLine();
		
		accuracy=trainSVM(20);
		out.write("20,"+accuracy);
		out.newLine();
		
		accuracy=trainSVM(50);
		out.write("50,"+accuracy);
		out.newLine();
		
		accuracy=trainSVM(100);
		out.write("100,"+accuracy);
		out.newLine();
		
		accuracy=trainSVM(200);
		out.write("200,"+accuracy);
		out.newLine();
		
		out.close();
	}
	
	// estimating running time: within 2 minutes
	public static double trainSVM(int dimension) throws Exception{

		
		System.out.println("############ Train SVM on "+dimension+" dimension data ############");
		int classIndex=dimension;
		//read the train.arff which is converted from train.csv
		System.out.println("Reading the input files......");
		BufferedReader trainDataReader = new BufferedReader(new FileReader("datasets//digits//train_to_"+dimension+"_dim.arff"));
		Instances trainData = new Instances(trainDataReader);
		trainData.setClassIndex(classIndex);

		// we only use some portion of training set
		Random seed=new Random(888);
		trainData.randomize(seed);
		Instances subTrainData=new Instances(trainData,0,trainData.numInstances()/4);
		subTrainData.setClassIndex(classIndex); // set label 

		//read the test.arff which is generated by PcaDimensionReduction.java  from train.csv
		BufferedReader testDataReader = new BufferedReader(new FileReader("datasets//digits//test_to_"+dimension+"_dim.arff"));
		Instances testData = new Instances(testDataReader);
		testData.setClassIndex(classIndex);


		//Train SVM with linear kernel

		LibSVM svmLinear=new LibSVM();
		// set parameters 
		svmLinear.setSVMType(new SelectedTag(LibSVM.SVMTYPE_C_SVC, LibSVM.TAGS_SVMTYPE));
		System.out.println("Training begins ..........");
		long startTime = (System.currentTimeMillis())/1000;	
		svmLinear.buildClassifier(subTrainData);		
		System.out.println("\nTraining finished!");
		long endTime = (System.currentTimeMillis())/1000;
		long runningTime = endTime-startTime;
		long sec= runningTime%60;
		long minutes= runningTime/60;
		System.out.println("Running time for training: "+minutes+" minutes, "+sec+" seconds\n");

		// Test on test set
		double right_num=0;
		double accuracy=0;
		System.out.println("Test begins.........");
		for(int i=0;i<testData.numInstances();i++){
			double newY=testData.instance(i).classValue();
			double predictY=svmLinear.classifyInstance(testData.instance(i));
			if (newY==predictY) right_num++;
		}
		accuracy=(double)right_num/testData.numInstances()*100d;
		System.out.println("Test finised, the accuracy on "+dimension+" dimension data is "+accuracy+" percent.");
		System.out.println("");
		return accuracy;
	}
}
