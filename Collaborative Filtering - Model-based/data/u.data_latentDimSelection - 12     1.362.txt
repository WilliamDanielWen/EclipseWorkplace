Latent dimension = 1,	RMSE = 3.4238887084589806,	 MAE = 3.2249738033291715
Latent dimension = 2,	RMSE = 3.1584049244186168,	 MAE = 2.9353874232141375
Latent dimension = 3,	RMSE = 2.9186351032868667,	 MAE = 2.6731913047719424
Latent dimension = 4,	RMSE = 2.7025231617226835,	 MAE = 2.4433967490287136
Latent dimension = 5,	RMSE = 2.4629656600887766,	 MAE = 2.1905880678918352
Latent dimension = 6,	RMSE = 2.2472144535213223,	 MAE = 1.9680802686089955
Latent dimension = 7,	RMSE = 2.0818213282802365,	 MAE = 1.7987466054057222
Latent dimension = 8,	RMSE = 1.885795207247181,	 MAE = 1.6093250138852024
Latent dimension = 9,	RMSE = 1.724909785205017,	 MAE = 1.4518477582033438
Latent dimension = 10,	RMSE = 1.5959894236892074,	 MAE = 1.3313327218730702
Latent dimension = 11,	RMSE = 1.4837880914073815,	 MAE = 1.2304332003268175
Latent dimension = 12,	RMSE = 1.4072186625186112,	 MAE = 1.1557249287442761
Latent dimension = 13,	RMSE = 1.3648430830572664,	 MAE = 1.1110533400805505
Latent dimension = 14,	RMSE = 1.3626726750784819,	 MAE = 1.1001047415627485  optimal
Latent dimension = 15,	RMSE = 1.3803990614270674,	 MAE = 1.102295977593488
Latent dimension = 16,	RMSE = 1.4362367418070605,	 MAE = 1.135485559745129
Latent dimension = 17,	RMSE = 1.5073737970226322,	 MAE = 1.1858572790888817
Latent dimension = 18,	RMSE = 1.6193591449620879,	 MAE = 1.2687257816310278
Latent dimension = 19,	RMSE = 1.7378140432471643,	 MAE = 1.366656367129011
Latent dimension = 20,	RMSE = 1.877994202507569,	 MAE = 1.4868097981180126
Latent dimension = 21,	RMSE = 2.0277926622601874,	 MAE = 1.6195479651474365
Latent dimension = 22,	RMSE = 2.1692814351001006,	 MAE = 1.7524878990100272
Latent dimension = 23,	RMSE = 2.3110196164250354,	 MAE = 1.8854930008379776
Latent dimension = 24,	RMSE = 2.4769884882858926,	 MAE = 2.0543359080163746
Latent dimension = 25,	RMSE = 2.6595792774468867,	 MAE = 2.2269470362668677
Latent dimension = 26,	RMSE = 2.8151597531917654,	 MAE = 2.3896668858188086
Latent dimension = 27,	RMSE = 2.9530157085555553,	 MAE = 2.5230315048930736
Latent dimension = 28,	RMSE = 3.124871303050737,	 MAE = 2.6911418131235068
Latent dimension = 29,	RMSE = 3.3070820941641337,	 MAE = 2.8779644426904447
Latent dimension = 30,	RMSE = 3.4721906744425155,	 MAE = 3.0333458911145335
Latent dimension = 31,	RMSE = 3.6776105427914922,	 MAE = 3.2356909450517373
Latent dimension = 32,	RMSE = 3.7920696249013908,	 MAE = 3.3531229782042695
Latent dimension = 33,	RMSE = 3.9759096016630244,	 MAE = 3.52237189174227
Latent dimension = 34,	RMSE = 4.155551617099535,	 MAE = 3.699667775581946
Latent dimension = 35,	RMSE = 4.326300335125548,	 MAE = 3.8557855657095104
Latent dimension = 36,	RMSE = 4.4658586872562225,	 MAE = 3.986243520121851
Latent dimension = 37,	RMSE = 4.669311247913643,	 MAE = 4.18407023644393
Latent dimension = 38,	RMSE = 4.775880841451526,	 MAE = 4.282492758803901
Latent dimension = 39,	RMSE = 4.983775909003354,	 MAE = 4.477347063262587
Latent dimension = 40,	RMSE = 5.118376815025928,	 MAE = 4.606623474824164
Latent dimension = 41,	RMSE = 5.290870180314518,	 MAE = 4.762095867829718
Latent dimension = 42,	RMSE = 5.430080226525648,	 MAE = 4.88346715558954
Latent dimension = 43,	RMSE = 5.5967355342376806,	 MAE = 5.040751543170262
Latent dimension = 44,	RMSE = 5.778917923410761,	 MAE = 5.2110355927429115
Latent dimension = 45,	RMSE = 5.958445693997428,	 MAE = 5.369150400880537
Latent dimension = 46,	RMSE = 6.126023703765793,	 MAE = 5.522364205294603
Latent dimension = 47,	RMSE = 6.255600283800331,	 MAE = 5.639232399749979
Latent dimension = 48,	RMSE = 6.3901187086572495,	 MAE = 5.75829387304044
Latent dimension = 49,	RMSE = 6.566788279977738,	 MAE = 5.918144517413394
Latent dimension = 50,	RMSE = 6.716370011715902,	 MAE = 6.050823988772565

		//initilization
		lambda=0.0001;
		eta=0.01;

		predictionLowerBound=1;
		predictionUpperBound=5;

		convergeSampleProportion=1;// select all the training example to calculate the cost function
		convergeThreshold=0.0000001;
		convergeCheckWindowSize=trainSet.size()*0.3;  // for every "convergeCheckWindowSize" number updates, check if converge


		//double middleValue=((predictionUpperBound-predictionLowerBound)/2)/latentDimension;
		double lower_bound_init=0;
		double upper_bound_init=1;