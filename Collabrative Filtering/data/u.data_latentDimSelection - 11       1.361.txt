Latent dimension = 1,	RMSE = 3.4222196901835416,	 MAE = 3.2227654392361202
Latent dimension = 2,	RMSE = 3.171551129402082,	 MAE = 2.9479990808415457
Latent dimension = 3,	RMSE = 2.9165776962066583,	 MAE = 2.6724429258334688
Latent dimension = 4,	RMSE = 2.7062546619906094,	 MAE = 2.4464636255639656
Latent dimension = 5,	RMSE = 2.472425005847424,	 MAE = 2.199347261199827
Latent dimension = 6,	RMSE = 2.2637540349069103,	 MAE = 1.9855509411067374
Latent dimension = 7,	RMSE = 2.0633437809180437,	 MAE = 1.7815002514356995
Latent dimension = 8,	RMSE = 1.8791524122537848,	 MAE = 1.6021276117991188
Latent dimension = 9,	RMSE = 1.7455337089134428,	 MAE = 1.4734252595040094
Latent dimension = 10,	RMSE = 1.6022633640429735,	 MAE = 1.338146440265177
Latent dimension = 11,	RMSE = 1.4946771046469152,	 MAE = 1.239327055663609
Latent dimension = 12,	RMSE = 1.4084234082220681,	 MAE = 1.157568197921949
Latent dimension = 13,	RMSE = 1.3773548051100934,	 MAE = 1.1210386288103342
Latent dimension = 14,	RMSE = 1.3619308051268881,	 MAE = 1.095573642647054 optimal 
Latent dimension = 15,	RMSE = 1.3831115125092308,	 MAE = 1.1036424980912831
Latent dimension = 16,	RMSE = 1.4384804444809347,	 MAE = 1.1354491323914166
Latent dimension = 17,	RMSE = 1.5164661313461416,	 MAE = 1.1927580347939362
Latent dimension = 18,	RMSE = 1.6076839137436287,	 MAE = 1.2625741099394268
Latent dimension = 19,	RMSE = 1.7557934239847142,	 MAE = 1.382946928374349
Latent dimension = 20,	RMSE = 1.8788761350104124,	 MAE = 1.48842027636836
Latent dimension = 21,	RMSE = 2.0146206097530044,	 MAE = 1.6129592869210012
Latent dimension = 22,	RMSE = 2.1480835854828197,	 MAE = 1.7331836645288032
Latent dimension = 23,	RMSE = 2.3399470019067365,	 MAE = 1.9174794009677445
Latent dimension = 24,	RMSE = 2.491556139610394,	 MAE = 2.0687427582878337
Latent dimension = 25,	RMSE = 2.637088487857217,	 MAE = 2.211544928887493
Latent dimension = 26,	RMSE = 2.787329041944249,	 MAE = 2.3596812236502327
Latent dimension = 27,	RMSE = 2.9785343163114177,	 MAE = 2.545889775369817
Latent dimension = 28,	RMSE = 3.120276998777615,	 MAE = 2.689532362946516
Latent dimension = 29,	RMSE = 3.287228338370175,	 MAE = 2.85621428626202
Latent dimension = 30,	RMSE = 3.4871745459192076,	 MAE = 3.0481780232921536
Latent dimension = 31,	RMSE = 3.6606768172598194,	 MAE = 3.214590414446664
Latent dimension = 32,	RMSE = 3.809155924207586,	 MAE = 3.3629043777121836
Latent dimension = 33,	RMSE = 3.96002763239708,	 MAE = 3.5110280795331135
Latent dimension = 34,	RMSE = 4.1546092795249425,	 MAE = 3.6947718549049413
Latent dimension = 35,	RMSE = 4.329904725414332,	 MAE = 3.860246925203947
Latent dimension = 36,	RMSE = 4.473602443307457,	 MAE = 3.9921300995602422
Latent dimension = 37,	RMSE = 4.672341505590083,	 MAE = 4.187474268027387
Latent dimension = 38,	RMSE = 4.798368459204092,	 MAE = 4.301204282588893
Latent dimension = 39,	RMSE = 4.9525087247825965,	 MAE = 4.446511908126686
Latent dimension = 40,	RMSE = 5.1701289997892586,	 MAE = 4.638751124384712
Latent dimension = 41,	RMSE = 5.320478036729334,	 MAE = 4.790733467118303
Latent dimension = 42,	RMSE = 5.457068788882369,	 MAE = 4.914894574614688
Latent dimension = 43,	RMSE = 5.634992749201831,	 MAE = 5.074711381002286
Latent dimension = 44,	RMSE = 5.760526992623276,	 MAE = 5.189084763169757
Latent dimension = 45,	RMSE = 5.943076613793935,	 MAE = 5.35864388068793
Latent dimension = 46,	RMSE = 6.109457932058267,	 MAE = 5.504140996440354
Latent dimension = 47,	RMSE = 6.211522597180865,	 MAE = 5.598359593889734
Latent dimension = 48,	RMSE = 6.416270196058643,	 MAE = 5.77798024830486
Latent dimension = 49,	RMSE = 6.523371391044745,	 MAE = 5.877829328867515
Latent dimension = 50,	RMSE = 6.746169433637765,	 MAE = 6.07984261832725

	//initilization
		lambda=0.001;
		eta=0.01;

		predictionLowerBound=1;
		predictionUpperBound=5;

		convergeSampleProportion=1;// select all the training example to calculate the cost function
		convergeThreshold=0.0000001;
		convergeCheckWindowSize=trainSet.size()*0.3;  // for every "convergeCheckWindowSize" number updates, check if converge


		//double middleValue=((predictionUpperBound-predictionLowerBound)/2)/latentDimension;
		double lower_bound_init=0;
		double upper_bound_init=1;

